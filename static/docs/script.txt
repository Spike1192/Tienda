CREATE TABLE log_cambios (
    id SERIAL PRIMARY KEY,
    tabla VARCHAR(50) NOT NULL,
    operacion VARCHAR(10) NOT NULL, -- INSERT, UPDATE, DELETE
    usuario VARCHAR(50) DEFAULT current_user,
    fecha TIMESTAMP DEFAULT current_timestamp,
    datos_ant JSONB,     
    datos_nuevos JSONB,
    fkcods integer not null default 1,
    foreign key(fkcods) references status(cods) on update cascade on delete restrict
);

CREATE OR REPLACE FUNCTION fn_log_cambios() RETURNS trigger AS $$
BEGIN
    IF TG_OP = 'INSERT' THEN
        INSERT INTO log_cambios(tabla, operacion, datos_nuevos)
        VALUES (TG_TABLE_NAME, TG_OP, row_to_json(NEW));
        RETURN NEW;
    ELSIF TG_OP = 'UPDATE' THEN
        INSERT INTO log_cambios(tabla, operacion, datos_ant, datos_nuevos)
        VALUES (TG_TABLE_NAME, TG_OP, row_to_json(OLD), row_to_json(NEW));
        RETURN NEW;
    ELSIF TG_OP = 'DELETE' THEN
        INSERT INTO log_cambios(tabla, operacion, datos_ant)
        VALUES (TG_TABLE_NAME, TG_OP, row_to_json(OLD));
        RETURN OLD;
    END IF;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_log_venta
AFTER INSERT OR UPDATE OR DELETE ON venta
FOR EACH ROW EXECUTE FUNCTION fn_log_cambios();

CREATE TRIGGER trg_log_detalleventa
AFTER INSERT OR UPDATE OR DELETE ON detalleventa
FOR EACH ROW EXECUTE FUNCTION fn_log_cambios();

CREATE TRIGGER trg_log_productos
AFTER INSERT OR UPDATE OR DELETE ON productos
FOR EACH ROW EXECUTE FUNCTION fn_log_cambios();
